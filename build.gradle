// Default tasks
defaultTasks 'clean', 'licenseFormat', 'build', 'install'

// Apply plugins
apply plugin: 'java'
apply plugin: 'cobertura' // Coveralls dependency
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'license'
apply plugin: 'maven'
apply plugin: 'signing'

// Project information
ext.projectName = 'Flow NBT'
group = 'com.flowpowered'
archivesBaseName = 'flow-nbt'
version = '1.0.1-SNAPSHOT'
ext.packaging = 'jar'
ext.inceptionYear = '2011'
ext.url = 'https://flowpowered.com/nbt'
ext.description = 'Named Binary Tag (NBT) library for Java based on Graham Edgecombe\'s JNBT library.'

// Organization information
ext.organization = 'Flow Powered'
ext.organizationUrl = 'https://flowpowered.com'

// Build properties
ext.buildNumber = project.hasProperty('buildNumber') ? buildNumber : '0'
ext.ciSystem = project.hasProperty('ciSystem') ? ciSystem : 'unknown'
ext.commit = project.hasProperty('commit') ? commit : 'unknown'

// Build plugin repositories and dependencies
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'sonatype-nexus'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
    }
    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8' // Coveralls dependency
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    }
}

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

// Project dependencies
dependencies {
    testCompile 'junit:junit:4.12'
}

// Filter, process, and include resources
processResources {
    // Include in final JAR
    from(rootProject.rootDir) {
        include 'LICENSE.txt'
    }
}

// License header formatting
license {
    ext.project = projectName
    ext.year = inceptionYear
    ext.name = organization
    ext.url = organizationUrl
    header rootProject.file('HEADER.txt')
    ignoreFailures true
    strictCheck true
    useDefaultMappings false
    mapping { java = 'SLASHSTAR_STYLE' }
}

// Source compiler configuration
configure([compileJava, compileTestJava]) {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Xlint:-path'
    options.deprecation = true
}

// JAR manifest configuration
jar.manifest.mainAttributes(
        'Built-By': System.properties['user.name'],
        'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
        'Specification-Title': projectName,
        'Specification-Version': version + '+' + ciSystem + '-b' + buildNumber + '.git-' + commit,
        'Specification-Vendor': organization + ' - ' + organizationUrl)

// Javadoc doclint configuration
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

// Coveralls report configuration
cobertura.coverageFormats = ['html', 'xml'] // Coveralls requires xml format

// Artifact deployment
uploadArchives {
    repositories.mavenDeployer {
        // Javadoc JAR generation
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        // Source JAR generation
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.java.srcDirs
        }

        // Set all artifacts
        artifacts {
            archives jar, javadocJar, sourcesJar
        }

        // Tasks and variables based on if release or snapshot
        if (version.endsWith('-SNAPSHOT')) {
            // Set variable to snapshots repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        } else {
            // Set variable to releases repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'

            // Artifact signing
            signing {
                // Sign JAR artifacts
                sign configurations.archives

                // Sign Maven POM
                beforeDeployment {
                    org.gradle.api.artifacts.maven.MavenDeployment deployment -> signing.signPom(deployment)
                }
            }
        }

        // Set login credentials for repository
        repository(url: sonatypeUrl) {
            authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
        }

        // Maven POM generation
        pom.project {
            name projectName
            artifactId archivesBaseName
            packaging packaging
            inceptionYear inceptionYear
            url url
            description project.ext.description

            scm {
                connection 'scm:git:git://github.com/flow/nbt.git'
                developerConnection 'scm:git:ssh://git@github.com:flow/nbt.git'
                url 'https://github.com/flow/nbt'
            }

            licenses {
                license {
                    name 'MIT License'
                    url 'https://tldrlegal.com/l/mit'
                    distribution 'repo'
                }
            }

            organization {
                name organization
                url organizationUrl
            }

            developers {
                developer {
                    id 'DDoS'
                    name 'Aleksi Sapon'
                    email 'qctechs@gmail.com'
                }
                developer {
                    id 'kitskub'
                    name 'Jack Huey'
                    email 'kitskub@gmail.com'
                }
                developer {
                    id 'Wolf480pl'
                    name 'Wolf480pl'
                    email 'wolf480@interia.pl'
                }
                developer {
                    id 'lukespragg'
                    name 'Luke Spragg'
                    email 'the@wulf.im'
                }
            }
        }
    }
}
